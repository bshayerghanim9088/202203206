from enum import Enum

# RoomType Enum for room types
class RoomType(Enum):
    Queen = 1
    King = 2
    Suite = 3

# Guest class represents the hotel guest
class Guest:
    def __init__(self, guestID=0, name="", contactDetails="", email="", reservation=None):
        self.guestID = guestID  # Unique identifier for the guest
        self.name = name  # Guest's name
        self.contactDetails = contactDetails  # Guest's contact information
        self.email = email  # Guest's email address
        self.reservation = reservation  # Reservation associated with the guest

    # Getters and Setters for guestID
    def getGuestID(self):
        return self.guestID

    def setGuestID(self, guestID):
        self.guestID = guestID

    # Getters and Setters for name
    def getName(self):
        return self.name

    def setName(self, name):
        self.name = name

    # Getters and Setters for contact details
    def getContactDetails(self):
        return self.contactDetails

    def setContactDetails(self, contactDetails):
        self.contactDetails = contactDetails

    # Getters and Setters for email
    def getEmail(self):
        return self.email

    def setEmail(self, email):
        self.email = email

    # Methods for booking, canceling, upgrading room, and extending stay
    def bookRoom(self):
        pass  # Placeholder for booking functionality

    def cancelReservation(self):
        pass  # Placeholder for canceling functionality

    def upgradeRoom(self):
        pass  # Placeholder for room upgrade functionality

    def extendStay(self):
        pass  # Placeholder for extending stay functionality

# Reservation class manages the reservation process
class Reservation:
    def __init__(self, reservationID=0, room=None, checkInDate="", checkOutDate="", status=""):
        self.reservationID = reservationID  # Unique identifier for the reservation
        self.room = room  # Room object associated with the reservation
        self.checkInDate = checkInDate  # Check-in date
        self.checkOutDate = checkOutDate  # Check-out date
        self.status = status  # Reservation status (e.g., Confirmed, Canceled)

    # Getters and Setters for reservationID
    def getReservationID(self):
        return self.reservationID

    def setReservationID(self, reservationID):
        self.reservationID = reservationID

    # Getters and Setters for check-in date
    def getCheckInDate(self):
        return self.checkInDate

    def setCheckInDate(self, checkInDate):
        self.checkInDate = checkInDate

    # Getters and Setters for check-out date
    def getCheckOutDate(self):
        return self.checkOutDate

    def setCheckOutDate(self, checkOutDate):
        self.checkOutDate = checkOutDate

    # Methods for confirming, canceling, extending stay, and upgrading room
    def confirmReservation(self):
        pass  # Placeholder for confirming reservation functionality

    def cancelReservation(self):
        pass  # Placeholder for canceling reservation functionality

    def extendStay(self):
        pass  # Placeholder for extending stay functionality

    def upgradeRoom(self):
        pass  # Placeholder for room upgrade functionality

# Room class to represent the hotel room
class Room:
    def __init__(self, roomNumber=0, roomType=RoomType.Queen, availability=True, price=0.0):
        self.roomNumber = roomNumber  # Room number
        self.roomType = roomType  # Type of room (Queen, King, Suite)
        self.availability = availability  # Availability status
        self.price = price  # Price per night

    # Getters and Setters for roomNumber
    def getRoomNumber(self):
        return self.roomNumber

    def setRoomNumber(self, roomNumber):
        self.roomNumber = roomNumber

    # Getters and Setters for roomType
    def getRoomType(self):
        return self.roomType

    def setRoomType(self, roomType):
        self.roomType = roomType

    # Methods for checking and updating availability
    def checkAvailability(self):
        return self.availability

    def updateAvailability(self, availability):
        self.availability = availability

    # Getters and Setters for price
    def getPrice(self):
        return self.price

    def setPrice(self, price):
        self.price = price

# Payment class handles the payment processing
class Payment:
    def __init__(self, paymentID=0, amount=0.0, cardNumber=""):
        self.paymentID = paymentID  # Unique payment ID
        self.amount = amount  # Payment amount
        self.cardNumber = cardNumber  # Card number used for payment

    # Getters and Setters for paymentID
    def getPaymentID(self):
        return self.paymentID

    def setPaymentID(self, paymentID):
        self.paymentID = paymentID

    # Getters and Setters for amount
    def getAmount(self):
        return self.amount

    def setAmount(self, amount):
        self.amount = amount

    # Masked card number (last 4 digits only)
    def getMaskedCardNumber(self):
        return f"**** **** **** {self.cardNumber[-4:]}"

    # Method to process the payment
    def processPayment(self):
        pass  # Placeholder for payment processing functionality

# HotelEmployee class represents hotel employees who assist with reservations
class HotelEmployee:
    def __init__(self, employeeID=0, name=""):
        self.employeeID = employeeID  # Unique identifier for the employee
        self.name = name  # Employee's name

    # Getters and Setters for employeeID
    def getEmployeeID(self):
        return self.employeeID

    def setEmployeeID(self, employeeID):
        self.employeeID = employeeID

    # Getters and Setters for name
    def getName(self):
        return self.name

    def setName(self, name):
        self.name = name

    # Methods for managing reservations, extending stay, and canceling reservations
    def manageReservation(self):
        pass  # Placeholder for managing reservation functionality

    def extendStay(self):
        pass  # Placeholder for extending stay functionality

    def cancelReservation(self):
        pass  # Placeholder for canceling reservation functionality

# Creating objects and displaying information

# Create a Room object
room1 = Room(roomNumber=101, roomType=RoomType.Queen, availability=True, price=89.85)

# Create a Reservation object for the guest
reservation1 = Reservation(reservationID=52573887, room=room1, checkInDate="2024-10-10", checkOutDate="2024-10-15", status="Confirmed")

# Create a Payment object
payment1 = Payment(paymentID=123456, amount=201.48, cardNumber="1234567890123456")

# Create a Guest object (represents a hotel guest)
guest1 = Guest(guestID=1001, name="Ali Al-Hashmi", contactDetails="0567891234", email="ali.alhashmi@example.com", reservation=reservation1)

# Create a HotelEmployee object (represents a hotel employee)
employee1 = HotelEmployee(employeeID=5001, name="Sara Al-Blooshi")

# Displaying the requested information

# Reservation Information
print(f"Your Reservation Is Confirmed")
print(f"Your Email: {guest1.getEmail()}")
print(f"Hotel Confirmation Number: {guest1.reservation.getReservationID()}")

# Room Information
print(f"\nRoom Type: {guest1.reservation.room.getRoomType().name} Beds")
print(f"Check-in Date: {guest1.reservation.getCheckInDate()}")
print(f"Check-out Date: {guest1.reservation.getCheckOutDate()}")
print(f"Room Cost per night: ${guest1.reservation.room.getPrice()}")

# Summary of Charges
print(f"\nBilling Name: {guest1.getName()}")
print(f"Credit Card: {payment1.getMaskedCardNumber()}")
print(f"Room Cost: ${guest1.reservation.room.getPrice()}")
print(f"Number of Nights: 2")
print(f"Room Subtotal: ${guest1.reservation.room.getPrice() * 2:.2f}")
print(f"Taxes and Fees: $21.58")
print(f"Total Charges: ${payment1.getAmount()}")
